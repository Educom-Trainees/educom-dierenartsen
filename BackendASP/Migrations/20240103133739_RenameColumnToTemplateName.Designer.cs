// <auto-generated />
using System;
using BackendASP.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendASP.Migrations
{
    [DbContext(typeof(PetCareContext))]
    [Migration("20240103133739_RenameColumnToTemplateName")]
    partial class RenameColumnToTemplateName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentTimeSlot", b =>
                {
                    b.Property<int>("AppointmentsId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentsId", "TimeSlotsId");

                    b.HasIndex("TimeSlotsId");

                    b.ToTable("AppointmentTimeSlot");
                });

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int>("LateStatus")
                        .HasColumnType("int");

                    b.Property<int>("PetCount")
                        .HasColumnType("int");

                    b.Property<int>("PetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Preference")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("PetTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentNumber = 1,
                            AppointmentTypeId = 5,
                            CustomerName = "Corbijn Bulsink",
                            Date = new DateOnly(2023, 11, 20),
                            Doctor = 1,
                            Duration = 30,
                            Email = "corbijn.bullie@hoi.nl",
                            LateStatus = 0,
                            PetCount = 1,
                            PetTypeId = 4,
                            PhoneNumber = "0611330161",
                            Preference = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentPet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentPets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Name = "Fifi"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentTimeId");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "consult",
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "eerste consult",
                            TreatmentTimeId = 4
                        },
                        new
                        {
                            Id = 3,
                            Name = "vaccinatie",
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "anaal klieren legen",
                            TreatmentTimeId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "nagels knippen",
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "bloed onderzoek",
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "urine onderzoek",
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "gebitscontrole",
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "postoperatieve controle",
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "herhaal recept bestellen",
                            TreatmentTimeId = 1
                        });
                });

            modelBuilder.Entity("BackendASP.Models.AvailableDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("AvailableDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 1
                        },
                        new
                        {
                            Id = 2,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 2
                        },
                        new
                        {
                            Id = 3,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 3
                        },
                        new
                        {
                            Id = 4,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 4
                        },
                        new
                        {
                            Id = 5,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 5
                        },
                        new
                        {
                            Id = 6,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 6
                        },
                        new
                        {
                            Id = 7,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 7
                        },
                        new
                        {
                            Id = 8,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 8
                        },
                        new
                        {
                            Id = 9,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 9
                        },
                        new
                        {
                            Id = 10,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 10
                        },
                        new
                        {
                            Id = 11,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 11
                        },
                        new
                        {
                            Id = 12,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 12
                        },
                        new
                        {
                            Id = 13,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 13
                        },
                        new
                        {
                            Id = 14,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 14
                        },
                        new
                        {
                            Id = 15,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 15
                        },
                        new
                        {
                            Id = 16,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 16
                        },
                        new
                        {
                            Id = 17,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 17
                        },
                        new
                        {
                            Id = 18,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 18
                        },
                        new
                        {
                            Id = 19,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 19
                        },
                        new
                        {
                            Id = 20,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 20
                        },
                        new
                        {
                            Id = 21,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 21
                        },
                        new
                        {
                            Id = 22,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 22
                        },
                        new
                        {
                            Id = 23,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 23
                        },
                        new
                        {
                            Id = 24,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 24
                        },
                        new
                        {
                            Id = 25,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 25
                        },
                        new
                        {
                            Id = 26,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 26
                        },
                        new
                        {
                            Id = 27,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 27
                        },
                        new
                        {
                            Id = 28,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 28
                        },
                        new
                        {
                            Id = 29,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 29
                        },
                        new
                        {
                            Id = 30,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 30
                        },
                        new
                        {
                            Id = 31,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 31
                        },
                        new
                        {
                            Id = 32,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 32
                        },
                        new
                        {
                            Id = 33,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 33
                        },
                        new
                        {
                            Id = 34,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 34
                        },
                        new
                        {
                            Id = 35,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 35
                        },
                        new
                        {
                            Id = 36,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 36
                        },
                        new
                        {
                            Id = 37,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 37
                        },
                        new
                        {
                            Id = 38,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 38
                        },
                        new
                        {
                            Id = 39,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 39
                        },
                        new
                        {
                            Id = 40,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 40
                        },
                        new
                        {
                            Id = 41,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 41
                        },
                        new
                        {
                            Id = 42,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 42
                        },
                        new
                        {
                            Id = 43,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 43
                        },
                        new
                        {
                            Id = 44,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 44
                        },
                        new
                        {
                            Id = 45,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 45
                        },
                        new
                        {
                            Id = 46,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 46
                        },
                        new
                        {
                            Id = 47,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 47
                        },
                        new
                        {
                            Id = 48,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 48
                        },
                        new
                        {
                            Id = 49,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 49
                        },
                        new
                        {
                            Id = 50,
                            Days = 0,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 50
                        },
                        new
                        {
                            Id = 51,
                            Days = 124,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 51
                        },
                        new
                        {
                            Id = 52,
                            Days = 0,
                            StartDate = new DateOnly(2023, 11, 1),
                            TimeSlotId = 52
                        });
                });

            modelBuilder.Entity("BackendASP.Models.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("PetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentTimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetTypeId");

                    b.HasIndex("TreatmentTimeId");

                    b.ToTable("Calculations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 15,
                            TreatmentTimeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Count = 4,
                            Duration = 30,
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Duration = 15,
                            TreatmentTimeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Count = 4,
                            Duration = 30,
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 5,
                            Count = 3,
                            Duration = 30,
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 6,
                            Duration = 15,
                            TreatmentTimeId = 3
                        },
                        new
                        {
                            Id = 7,
                            Count = 4,
                            Duration = 45,
                            TreatmentTimeId = 4
                        },
                        new
                        {
                            Id = 8,
                            Count = 3,
                            Duration = 45,
                            PetTypeId = 9,
                            TreatmentTimeId = 4
                        },
                        new
                        {
                            Id = 9,
                            Duration = 30,
                            TreatmentTimeId = 4
                        });
                });

            modelBuilder.Entity("BackendASP.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "\"\r\n                Beste {appointmentDTO.CustomerName},\r\n                <br />\r\n                <br />\r\n                Bij deze bevestigen wij dat uw afspraak gepland is voor:\r\n                <br />\r\n                <br />\r\n                Datum: {appointmentDTO.Date}\r\n                <br />\r\n                Tijd: {appointmentDTO.TimeSlotTime}\r\n                <br />\r\n                Dierenarts: {appointmentDTO.Doctor.ToFriendlyString()}\r\n                <br />\r\n                <br />\r\n                We kijken ernaar uit om uw huisdier te ontvangen. Als u nog specifieke vragen heeft of bepaalde informatie met ons wilt delen, aarzel dan niet om contact met ons op te nemen.\r\n                <br />\r\n                <br />\r\n                Tot ziens in de praktijk!\r\n                <br />\r\n                <br />\r\n                Met vriendelijke groeten,\r\n                <br />\r\n                <br />\r\n                Karel en Danique van Dierenpraktijk HappyPaws\r\n                \"",
                            Subject = "Afspraak bevestiging voor {appointmentDTO.Date}",
                            TemplateName = "Appointment Confirmation"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Plural")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "dog.png",
                            Name = "hond",
                            Plural = "honden"
                        },
                        new
                        {
                            Id = 2,
                            Image = "black-cat.png",
                            Name = "kat",
                            Plural = "katten"
                        },
                        new
                        {
                            Id = 3,
                            Image = "rabbit.png",
                            Name = "konijn",
                            Plural = "konijnen"
                        },
                        new
                        {
                            Id = 4,
                            Image = "guinea-pig.png",
                            Name = "cavia",
                            Plural = "cavia's"
                        },
                        new
                        {
                            Id = 5,
                            Image = "hamster.png",
                            Name = "hamster",
                            Plural = "hamsters"
                        },
                        new
                        {
                            Id = 6,
                            Image = "rat.png",
                            Name = "rat",
                            Plural = "ratten"
                        },
                        new
                        {
                            Id = 7,
                            Image = "muis.png",
                            Name = "muis",
                            Plural = "muizen"
                        },
                        new
                        {
                            Id = 8,
                            Image = "dog.png",
                            Name = "kleine hond",
                            ParentId = 1,
                            Plural = "kleine honden"
                        },
                        new
                        {
                            Id = 9,
                            Image = "dog.png",
                            Name = "grote hond",
                            ParentId = 1,
                            Plural = "grote honden"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousTimeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreviousTimeSlotId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Doctor = 1,
                            Time = "09:00"
                        },
                        new
                        {
                            Id = 2,
                            Doctor = 2,
                            Time = "09:00"
                        },
                        new
                        {
                            Id = 3,
                            Doctor = 1,
                            PreviousTimeSlotId = 1,
                            Time = "09:15"
                        },
                        new
                        {
                            Id = 4,
                            Doctor = 2,
                            PreviousTimeSlotId = 2,
                            Time = "09:15"
                        },
                        new
                        {
                            Id = 5,
                            Doctor = 1,
                            PreviousTimeSlotId = 3,
                            Time = "09:30"
                        },
                        new
                        {
                            Id = 6,
                            Doctor = 2,
                            PreviousTimeSlotId = 4,
                            Time = "09:30"
                        },
                        new
                        {
                            Id = 7,
                            Doctor = 1,
                            PreviousTimeSlotId = 5,
                            Time = "09:45"
                        },
                        new
                        {
                            Id = 8,
                            Doctor = 2,
                            PreviousTimeSlotId = 6,
                            Time = "09:45"
                        },
                        new
                        {
                            Id = 9,
                            Doctor = 1,
                            PreviousTimeSlotId = 7,
                            Time = "10:00"
                        },
                        new
                        {
                            Id = 10,
                            Doctor = 2,
                            PreviousTimeSlotId = 8,
                            Time = "10:00"
                        },
                        new
                        {
                            Id = 11,
                            Doctor = 1,
                            PreviousTimeSlotId = 9,
                            Time = "10:15"
                        },
                        new
                        {
                            Id = 12,
                            Doctor = 2,
                            PreviousTimeSlotId = 10,
                            Time = "10:15"
                        },
                        new
                        {
                            Id = 13,
                            Doctor = 1,
                            PreviousTimeSlotId = 11,
                            Time = "10:30"
                        },
                        new
                        {
                            Id = 14,
                            Doctor = 2,
                            PreviousTimeSlotId = 12,
                            Time = "10:30"
                        },
                        new
                        {
                            Id = 15,
                            Doctor = 1,
                            PreviousTimeSlotId = 13,
                            Time = "10:45"
                        },
                        new
                        {
                            Id = 16,
                            Doctor = 2,
                            PreviousTimeSlotId = 14,
                            Time = "10:45"
                        },
                        new
                        {
                            Id = 17,
                            Doctor = 1,
                            PreviousTimeSlotId = 15,
                            Time = "11:00"
                        },
                        new
                        {
                            Id = 18,
                            Doctor = 2,
                            PreviousTimeSlotId = 16,
                            Time = "11:00"
                        },
                        new
                        {
                            Id = 19,
                            Doctor = 1,
                            PreviousTimeSlotId = 17,
                            Time = "11:15"
                        },
                        new
                        {
                            Id = 20,
                            Doctor = 2,
                            PreviousTimeSlotId = 18,
                            Time = "11:15"
                        },
                        new
                        {
                            Id = 21,
                            Doctor = 1,
                            PreviousTimeSlotId = 19,
                            Time = "11:30"
                        },
                        new
                        {
                            Id = 22,
                            Doctor = 2,
                            PreviousTimeSlotId = 20,
                            Time = "11:30"
                        },
                        new
                        {
                            Id = 23,
                            Doctor = 1,
                            PreviousTimeSlotId = 21,
                            Time = "11:45"
                        },
                        new
                        {
                            Id = 24,
                            Doctor = 2,
                            PreviousTimeSlotId = 22,
                            Time = "11:45"
                        },
                        new
                        {
                            Id = 25,
                            Doctor = 1,
                            PreviousTimeSlotId = 23,
                            Time = "12:00"
                        },
                        new
                        {
                            Id = 26,
                            Doctor = 2,
                            PreviousTimeSlotId = 24,
                            Time = "12:00"
                        },
                        new
                        {
                            Id = 27,
                            Doctor = 1,
                            PreviousTimeSlotId = 25,
                            Time = "14:15"
                        },
                        new
                        {
                            Id = 28,
                            Doctor = 2,
                            PreviousTimeSlotId = 26,
                            Time = "14:15"
                        },
                        new
                        {
                            Id = 29,
                            Doctor = 1,
                            PreviousTimeSlotId = 27,
                            Time = "14:30"
                        },
                        new
                        {
                            Id = 30,
                            Doctor = 2,
                            PreviousTimeSlotId = 28,
                            Time = "14:30"
                        },
                        new
                        {
                            Id = 31,
                            Doctor = 1,
                            PreviousTimeSlotId = 29,
                            Time = "14:45"
                        },
                        new
                        {
                            Id = 32,
                            Doctor = 2,
                            PreviousTimeSlotId = 30,
                            Time = "14:45"
                        },
                        new
                        {
                            Id = 33,
                            Doctor = 1,
                            PreviousTimeSlotId = 31,
                            Time = "15:00"
                        },
                        new
                        {
                            Id = 34,
                            Doctor = 2,
                            PreviousTimeSlotId = 32,
                            Time = "15:00"
                        },
                        new
                        {
                            Id = 35,
                            Doctor = 1,
                            PreviousTimeSlotId = 33,
                            Time = "15:15"
                        },
                        new
                        {
                            Id = 36,
                            Doctor = 2,
                            PreviousTimeSlotId = 34,
                            Time = "15:15"
                        },
                        new
                        {
                            Id = 37,
                            Doctor = 1,
                            PreviousTimeSlotId = 35,
                            Time = "15:30"
                        },
                        new
                        {
                            Id = 38,
                            Doctor = 2,
                            PreviousTimeSlotId = 36,
                            Time = "15:30"
                        },
                        new
                        {
                            Id = 39,
                            Doctor = 1,
                            PreviousTimeSlotId = 37,
                            Time = "15:45"
                        },
                        new
                        {
                            Id = 40,
                            Doctor = 2,
                            PreviousTimeSlotId = 38,
                            Time = "15:45"
                        },
                        new
                        {
                            Id = 41,
                            Doctor = 1,
                            PreviousTimeSlotId = 39,
                            Time = "16:00"
                        },
                        new
                        {
                            Id = 42,
                            Doctor = 2,
                            PreviousTimeSlotId = 40,
                            Time = "16:00"
                        },
                        new
                        {
                            Id = 43,
                            Doctor = 1,
                            PreviousTimeSlotId = 41,
                            Time = "16:15"
                        },
                        new
                        {
                            Id = 44,
                            Doctor = 2,
                            PreviousTimeSlotId = 42,
                            Time = "16:15"
                        },
                        new
                        {
                            Id = 45,
                            Doctor = 1,
                            PreviousTimeSlotId = 43,
                            Time = "16:30"
                        },
                        new
                        {
                            Id = 46,
                            Doctor = 2,
                            PreviousTimeSlotId = 44,
                            Time = "16:30"
                        },
                        new
                        {
                            Id = 47,
                            Doctor = 1,
                            PreviousTimeSlotId = 45,
                            Time = "16:45"
                        },
                        new
                        {
                            Id = 48,
                            Doctor = 2,
                            PreviousTimeSlotId = 46,
                            Time = "16:45"
                        },
                        new
                        {
                            Id = 49,
                            Doctor = 1,
                            PreviousTimeSlotId = 47,
                            Time = "17:00"
                        },
                        new
                        {
                            Id = 50,
                            Doctor = 2,
                            PreviousTimeSlotId = 48,
                            Time = "17:00"
                        },
                        new
                        {
                            Id = 51,
                            Doctor = 1,
                            PreviousTimeSlotId = 49,
                            Time = "17:15"
                        },
                        new
                        {
                            Id = 52,
                            Doctor = 2,
                            PreviousTimeSlotId = 50,
                            Time = "17:15"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.TreatmentTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreatmentTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "kort"
                        },
                        new
                        {
                            Id = 2,
                            Name = "kort - gemiddeld"
                        },
                        new
                        {
                            Id = 3,
                            Name = "gemiddeld"
                        },
                        new
                        {
                            Id = 4,
                            Name = "gemiddeld - lang"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Doctor = 0,
                            Email = "brandon@gmail.com",
                            FirstName = "Brandon",
                            LastName = "Klant",
                            PasswordHash = "$2a$10$SvgoFJscAHARXBJRzqG4wO8.hW5b3Xjoea/5QQchHAAPPYoJZLmpS",
                            PhoneNumber = "067890456",
                            Role = 0,
                            Salutation = "Meneer"
                        },
                        new
                        {
                            Id = 2,
                            Doctor = 0,
                            Email = "s123s12dass@s.com",
                            FirstName = "Stijn",
                            LastName = "Engelmoer",
                            PasswordHash = "$2a$10$gPUJzQBPvMNpuHU2C337n.bmKeTgjjX9PVRFUTVi624lShT3A263u",
                            PhoneNumber = "123321",
                            Role = 0,
                            Salutation = "Mevrouw"
                        },
                        new
                        {
                            Id = 3,
                            Doctor = 1,
                            Email = "karel@happypaw.nl",
                            FirstName = "Karel",
                            LastName = "Lant",
                            PasswordHash = "$2a$10$fuY21uRpsloZwQCL4SJzUuCv0lvf6H3CfC0QzLP1DAjsV2ntwvbPG",
                            PhoneNumber = "0611223344",
                            Role = 1,
                            Salutation = "Meneer"
                        },
                        new
                        {
                            Id = 4,
                            Doctor = 2,
                            Email = "danique@happypaw.nl",
                            FirstName = "Danique",
                            LastName = "de Beer",
                            PasswordHash = "$2a$10$d42bHqP0V.N/99GPmWm6QeSgN92euYdvTHH2SHzHQzI2T2I/6HeIq",
                            PhoneNumber = "0687654321",
                            Role = 1,
                            Salutation = "Mevrouw"
                        },
                        new
                        {
                            Id = 5,
                            Doctor = 0,
                            Email = "admin@happypaw.nl",
                            FirstName = "Admin",
                            LastName = "Secretaresse",
                            PasswordHash = "$2a$10$ueqBUHOfk8IuBG6XhCZG2.XVuJUfwVQDjhCg4fktmtSVZLaGaXdqG",
                            PhoneNumber = "0623445443",
                            Role = 2,
                            Salutation = "Mevrouw"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.UserPet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPets");
                });

            modelBuilder.Entity("BackendASP.Models.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("AppointmentTimeSlot", b =>
                {
                    b.HasOne("BackendASP.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendASP.Models.TimeSlot", null)
                        .WithMany()
                        .HasForeignKey("TimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.HasOne("BackendASP.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendASP.Models.PetType", "PetType")
                        .WithMany("Appointments")
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendASP.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("PetType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentPet", b =>
                {
                    b.HasOne("BackendASP.Models.Appointment", "Appointment")
                        .WithMany("Pets")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentType", b =>
                {
                    b.HasOne("BackendASP.Models.TreatmentTime", "TreatmentTime")
                        .WithMany("AppointmentType")
                        .HasForeignKey("TreatmentTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentTime");
                });

            modelBuilder.Entity("BackendASP.Models.AvailableDays", b =>
                {
                    b.HasOne("BackendASP.Models.TimeSlot", "TimeSlot")
                        .WithMany("AvailableDays")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("BackendASP.Models.Calculation", b =>
                {
                    b.HasOne("BackendASP.Models.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId");

                    b.HasOne("BackendASP.Models.TreatmentTime", "TreatmentTime")
                        .WithMany("Calculation")
                        .HasForeignKey("TreatmentTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetType");

                    b.Navigation("TreatmentTime");
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.HasOne("BackendASP.Models.PetType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BackendASP.Models.TimeSlot", b =>
                {
                    b.HasOne("BackendASP.Models.TimeSlot", "PreviousTimeSlot")
                        .WithMany()
                        .HasForeignKey("PreviousTimeSlotId");

                    b.Navigation("PreviousTimeSlot");
                });

            modelBuilder.Entity("BackendASP.Models.UserPet", b =>
                {
                    b.HasOne("BackendASP.Models.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendASP.Models.User", "User")
                        .WithMany("UserPets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendASP.Models.Vacation", b =>
                {
                    b.HasOne("BackendASP.Models.User", "User")
                        .WithMany("Vacations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BackendASP.Models.TimeSlot", b =>
                {
                    b.Navigation("AvailableDays");
                });

            modelBuilder.Entity("BackendASP.Models.TreatmentTime", b =>
                {
                    b.Navigation("AppointmentType");

                    b.Navigation("Calculation");
                });

            modelBuilder.Entity("BackendASP.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("UserPets");

                    b.Navigation("Vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
