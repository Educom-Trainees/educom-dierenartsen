// <auto-generated />
using System;
using BackendASP.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendASP.Migrations
{
    [DbContext(typeof(PetCareContext))]
    [Migration("20231124081027_AddedAppointmentType")]
    partial class AddedAppointmentType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int>("PetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Preference")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentNumber = 1,
                            AppointmentTypeId = 5,
                            CustomerName = "Corbijn Bulsink",
                            Date = new DateOnly(2023, 11, 20),
                            Doctor = 1,
                            Duration = 30,
                            Email = "corbijn.bullie@hoi.nl",
                            PetTypeId = 4,
                            PhoneNumber = "0611330161",
                            Preference = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentPet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentPets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Name = "Fifi"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "consult"
                        },
                        new
                        {
                            Id = 2,
                            Name = "eerste consult"
                        },
                        new
                        {
                            Id = 3,
                            Name = "vaccinatie"
                        },
                        new
                        {
                            Id = 4,
                            Name = "anaal klieren legen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "nagels knippen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "bloed onderzoek"
                        },
                        new
                        {
                            Id = 7,
                            Name = "urine onderzoek"
                        },
                        new
                        {
                            Id = 8,
                            Name = "gebitscontrole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "postoperatieve controle"
                        },
                        new
                        {
                            Id = 10,
                            Name = "herhaal recept bestellen"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Plural")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "dog.png",
                            Name = "hond",
                            Plural = "honden"
                        },
                        new
                        {
                            Id = 2,
                            Image = "black-cat.png",
                            Name = "kat",
                            Plural = "katten"
                        },
                        new
                        {
                            Id = 3,
                            Image = "rabbit.png",
                            Name = "konijn",
                            Plural = "konijnen"
                        },
                        new
                        {
                            Id = 4,
                            Image = "guinea-pig.png",
                            Name = "cavia",
                            Plural = "cavia's"
                        },
                        new
                        {
                            Id = 5,
                            Image = "hamster.png",
                            Name = "hamster",
                            Plural = "hamsters"
                        },
                        new
                        {
                            Id = 6,
                            Image = "rat.png",
                            Name = "rat",
                            Plural = "ratten"
                        },
                        new
                        {
                            Id = 7,
                            Image = "muis.png",
                            Name = "muis",
                            Plural = "muizen"
                        },
                        new
                        {
                            Id = 8,
                            Image = "dog.png",
                            Name = "kleine hond",
                            ParentId = 1,
                            Plural = "kleine honden"
                        },
                        new
                        {
                            Id = 9,
                            Image = "dog.png",
                            Name = "grote hond",
                            ParentId = 1,
                            Plural = "grote honden"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "brandon@gmail.com",
                            FirstName = "Brandon",
                            LastName = "Klant",
                            PasswordHash = "$2a$10$SvgoFJscAHARXBJRzqG4wO8.hW5b3Xjoea/5QQchHAAPPYoJZLmpS",
                            PhoneNumber = "067890456",
                            Role = 0,
                            Salutation = "Meneer"
                        },
                        new
                        {
                            Id = 2,
                            Email = "s123s12dass@s.com",
                            FirstName = "Stijn",
                            LastName = "Engelmoer",
                            PasswordHash = "$2a$10$gPUJzQBPvMNpuHU2C337n.bmKeTgjjX9PVRFUTVi624lShT3A263u",
                            PhoneNumber = "123321",
                            Role = 0,
                            Salutation = "Mevrouw"
                        },
                        new
                        {
                            Id = 3,
                            Email = "karel@happypaw.nl",
                            FirstName = "Karel",
                            LastName = "Lant",
                            PasswordHash = "$2a$10$fuY21uRpsloZwQCL4SJzUuCv0lvf6H3CfC0QzLP1DAjsV2ntwvbPG",
                            Role = 1,
                            Salutation = "Meneer"
                        });
                });

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.HasOne("BackendASP.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendASP.Models.PetType", "PetType")
                        .WithMany("Appointments")
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentPet", b =>
                {
                    b.HasOne("BackendASP.Models.Appointment", "Appointment")
                        .WithMany("Pets")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.HasOne("BackendASP.Models.PetType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BackendASP.Models.Appointment", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("BackendASP.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BackendASP.Models.PetType", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
